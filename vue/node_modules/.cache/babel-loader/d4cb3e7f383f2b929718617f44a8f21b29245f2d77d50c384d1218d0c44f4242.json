{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  name: \"Login\",\n  data() {\n    return {\n      form: {\n        username: '',\n        password: '',\n        role: 'ADMIN',\n        captcha: '' // 验证码字段\n      },\n\n      captchaImage: '',\n      // 存储验证码图片\n      abc: '',\n      // 存储验证码\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入账号',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }],\n        captcha: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    // 请求验证码\n    fetchCaptcha() {\n      this.$axios.get('/getCode', {\n        responseType: 'arraybuffer'\n      }).then(response => {\n        const captchaValue = response.headers['captcha']; // 获取响应头中的 captcha\n        if (captchaValue) {\n          this.abc = captchaValue; // 存储 captcha\n          console.log(\"获取到的验证码：\", this.abc);\n        } else {\n          console.error('验证码未设置在响应头中');\n        }\n        const blob = new Blob([response.data], {\n          type: 'image/jpeg'\n        });\n        this.captchaImage = URL.createObjectURL(blob);\n      }).catch(error => {\n        console.error('获取验证码失败:', error);\n      });\n    },\n    login() {\n      this.$refs['formRef'].validate(valid => {\n        if (valid) {\n          // 验证通过\n          this.$axios.post('/login', this.form, {\n            headers: {\n              'captcha': this.abc // 将 abc 添加到请求头\n            }\n          }).then(res => {\n            if (res.code === '200') {\n              localStorage.setItem(\"xm-user\", JSON.stringify(res.data)); // 存储用户数据\n              if (res.data.role === 'ADMIN') {\n                location.href = '/home';\n              } else {\n                location.href = '/front/home';\n              }\n              this.$message.success('登录成功');\n            } else {\n              this.$message.error(res.msg);\n              this.fetchCaptcha(); // 登录失败时刷新验证码\n            }\n          });\n        }\n      });\n    },\n\n    created() {\n      this.fetchCaptcha(); // 页面加载时获取验证码\n    }\n  }\n};","map":{"version":3,"names":["name","data","form","username","password","role","captcha","captchaImage","abc","rules","required","message","trigger","methods","fetchCaptcha","$axios","get","responseType","then","response","captchaValue","headers","console","log","error","blob","Blob","type","URL","createObjectURL","catch","login","$refs","validate","valid","post","res","code","localStorage","setItem","JSON","stringify","location","href","$message","success","msg","created"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div style=\"width: 400px; padding: 30px; background-color: white; border-radius: 5px;\">\n      <div style=\"text-align: center; font-size: 20px; margin-bottom: 20px; color: #333\">欢迎使用</div>\n      <el-form :model=\"form\" :rules=\"rules\" ref=\"formRef\">\n\n\n        <el-form-item prop=\"username\">\n          <el-input prefix-icon=\"el-icon-user\" placeholder=\"请输入账号\" v-model=\"form.username\"></el-input>\n        </el-form-item>\n        <el-form-item prop=\"password\">\n          <el-input prefix-icon=\"el-icon-lock\" placeholder=\"请输入密码\" show-password v-model=\"form.password\"></el-input>\n        </el-form-item>\n        <!-- 验证码输入框和验证码图片 -->\n        <el-form-item prop=\"captcha\">\n          <div style=\"display: flex; align-items: center;\">\n            <el-input placeholder=\"请输入验证码\" v-model=\"form.captcha\" style=\"flex: 2;\"></el-input>\n            <img :src=\"captchaImage\" @click=\"fetchCaptcha\"\n              style=\"flex: 1; height: 36px; cursor: pointer; margin-left: 10px;\">\n          </div>\n        </el-form-item>\n        <el-form-item>\n          <el-select v-model=\"form.role\" placeholder=\"请选择角色\" style=\"width: 100%\">\n            <el-option label=\"管理员\" value=\"ADMIN\"></el-option>\n            <el-option label=\"用户\" value=\"USER\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item>\n          <el-button style=\"width: 100%; background-color: #333; border-color: #333; color: white\" @click=\"login\">登\n            录</el-button>\n        </el-form-item>\n        <div style=\"display: flex; align-items: center\">\n          <div style=\"flex: 1\"></div>\n          <div style=\"flex: 1; text-align: right\">\n            还没有账号？请 <a href=\"/register\">注册</a>\n          </div>\n        </div>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Login\",\n  data() {\n    return {\n      form: {\n        username: '',\n        password: '',\n        role: 'ADMIN',\n        captcha: '', // 验证码字段\n      },\n      captchaImage: '', // 存储验证码图片\n      abc: '', // 存储验证码\n      rules: {\n        username: [\n          { required: true, message: '请输入账号', trigger: 'blur' },\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n        ],\n        captcha: [\n          { required: true, message: '请输入验证码', trigger: 'blur' },\n        ]\n      }\n    }\n  },\n\n  methods: {\n    // 请求验证码\n    fetchCaptcha() {\n      this.$axios.get('/getCode', { responseType: 'arraybuffer' })\n        .then(response => {\n\n          const captchaValue = response.headers['captcha']; // 获取响应头中的 captcha\n          if (captchaValue) {\n            this.abc = captchaValue; // 存储 captcha\n            console.log(\"获取到的验证码：\", this.abc);\n          } else {\n            console.error('验证码未设置在响应头中');\n          }\n          const blob = new Blob([response.data], { type: 'image/jpeg' });\n          this.captchaImage = URL.createObjectURL(blob);\n        })\n        .catch(error => {\n          console.error('获取验证码失败:', error);\n        });\n    },\n\n    login() {\n      this.$refs['formRef'].validate((valid) => {\n        if (valid) {\n          // 验证通过\n          this.$axios.post('/login', this.form, {\n            headers: {\n              'captcha': this.abc // 将 abc 添加到请求头\n            }\n          }).then(res => {\n            if (res.code === '200') {\n              localStorage.setItem(\"xm-user\", JSON.stringify(res.data)); // 存储用户数据\n              if (res.data.role === 'ADMIN') {\n                location.href = '/home';\n              } else {\n                location.href = '/front/home';\n              }\n              this.$message.success('登录成功');\n            } else {\n              this.$message.error(res.msg);\n              this.fetchCaptcha(); // 登录失败时刷新验证码\n            }\n          });\n        }\n      });\n    },\n    created() {\n      this.fetchCaptcha(); // 页面加载时获取验证码\n    }\n  }\n\n}\n</script>\n\n<style scoped>\n.container {\n  height: 100vh;\n  overflow: hidden;\n  background-image: url(\"@/assets/imgs/bg.jpg\");\n  background-size: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n}\n\na {\n  color: #2a60c9;\n}\n</style>\n"],"mappings":";;;AA2CA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,QAAA;QACAC,QAAA;QACAC,IAAA;QACAC,OAAA;MACA;;MACAC,YAAA;MAAA;MACAC,GAAA;MAAA;MACAC,KAAA;QACAN,QAAA,GACA;UAAAO,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAR,QAAA,GACA;UAAAM,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,OAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EAEAC,OAAA;IACA;IACAC,aAAA;MACA,KAAAC,MAAA,CAAAC,GAAA;QAAAC,YAAA;MAAA,GACAC,IAAA,CAAAC,QAAA;QAEA,MAAAC,YAAA,GAAAD,QAAA,CAAAE,OAAA;QACA,IAAAD,YAAA;UACA,KAAAZ,GAAA,GAAAY,YAAA;UACAE,OAAA,CAAAC,GAAA,kBAAAf,GAAA;QACA;UACAc,OAAA,CAAAE,KAAA;QACA;QACA,MAAAC,IAAA,OAAAC,IAAA,EAAAP,QAAA,CAAAlB,IAAA;UAAA0B,IAAA;QAAA;QACA,KAAApB,YAAA,GAAAqB,GAAA,CAAAC,eAAA,CAAAJ,IAAA;MACA,GACAK,KAAA,CAAAN,KAAA;QACAF,OAAA,CAAAE,KAAA,aAAAA,KAAA;MACA;IACA;IAEAO,MAAA;MACA,KAAAC,KAAA,YAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAnB,MAAA,CAAAoB,IAAA,gBAAAjC,IAAA;YACAmB,OAAA;cACA,gBAAAb,GAAA;YACA;UACA,GAAAU,IAAA,CAAAkB,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACAC,YAAA,CAAAC,OAAA,YAAAC,IAAA,CAAAC,SAAA,CAAAL,GAAA,CAAAnC,IAAA;cACA,IAAAmC,GAAA,CAAAnC,IAAA,CAAAI,IAAA;gBACAqC,QAAA,CAAAC,IAAA;cACA;gBACAD,QAAA,CAAAC,IAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA;YACA;cACA,KAAAD,QAAA,CAAApB,KAAA,CAAAY,GAAA,CAAAU,GAAA;cACA,KAAAhC,YAAA;YACA;UACA;QACA;MACA;IACA;;IACAiC,QAAA;MACA,KAAAjC,YAAA;IACA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}